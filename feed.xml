<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Gerardo Moad&#39;s blog</title>
        <description>A software guy&#39;s ideas and findings scratchpad...</description>      
        <link>http://gerardomoad.com</link>
        <atom:link href="http://gerardomoad.com/feed.xml" rel="self" type="application/rss+xml" />
        
            <item>
                <title>Safely Daemonizing A Nodejs Server In Ubuntu</title>
                <description>&lt;h1 id=&quot;safely-daemonizing-a-nodejs-server-in-ubuntu&quot;&gt;Safely &lt;em&gt;daemonizing&lt;/em&gt; a NodeJS server in Ubuntu&lt;/h1&gt;

&lt;p&gt;We don’t want to run the NodeJS service as root just to be able to bind to
port 80, given all the risks that doing this would bring.&lt;/p&gt;

&lt;h2 id=&quot;use-iptables-to-forward-requests-coming-in-on-port-80-over-to-port-3000&quot;&gt;Use &lt;code&gt;iptables&lt;/code&gt; to forward requests coming in on port 80 over to port 3000&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;sudo iptables -t nat -A PREROUTING -i eth0 -p tcp --dport 80 -j REDIRECT --to-port 3000&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;sudo ip6tables -t nat -A PREROUTING -i eth0 -p tcp --dport 80 -j REDIRECT --to-port 3000&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;… this will work until you restart the server.&lt;/p&gt;

&lt;h2 id=&quot;use-iptables-persistent-to-restore-the-iptables-routes-automatically-on-every-reboot&quot;&gt;Use &lt;code&gt;iptables-persistent&lt;/code&gt; to restore the &lt;code&gt;iptables&lt;/code&gt; routes automatically on every reboot&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;sudo apt-get install iptables-persistent&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;… if you did this after the &lt;code&gt;iptables&lt;/code&gt; command above it, just answer &lt;em&gt;yes&lt;/em&gt; and &lt;em&gt;yes&lt;/em&gt;
to save your forwarding rules in package &lt;code&gt;iptables-persistent&lt;/code&gt; post-install script.&lt;/p&gt;

&lt;p&gt;If, for some reason, your routes were not quite working the way you wanted them to
before you installed package &lt;code&gt;iptables-persistent&lt;/code&gt;, go ahead and tweak them to your
liking, and then run the following commands to save them:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;sudo iptables-save &amp;gt; /etc/iptables/rules.v4&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;sudo ip6tables-save &amp;gt; /etc/iptables/rules.v6&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;That’s it! &lt;code&gt;iptables-persistent&lt;/code&gt; is a service that should load &lt;code&gt;/etc/iptables/rules.v{4,6}&lt;/code&gt;
into &lt;code&gt;iptables&lt;/code&gt; on system startup!&lt;/p&gt;

&lt;h2 id=&quot;use-upstart-to-daemonize-your-nodejs-service&quot;&gt;Use &lt;code&gt;upstart&lt;/code&gt; to “daemonize” your &lt;code&gt;NodeJS&lt;/code&gt; service&lt;/h2&gt;

&lt;p&gt;cat /home/ubuntu/myservice/server.sh:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#!/bin/bash

SCRIPT_PATH=$(dirname `which $0`)

node --harmony $SCRIPT_PATH/index.js
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;cat /etc/init/myservice.conf:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# cat /etc/init/myservice.conf
# http://upstart.ubuntu.com/wiki/Stanzas

description &quot;My Service&quot;
author      &quot;github.com/sanx&quot;

stop on shutdown
respawn
respawn limit 20 5

# Max open files are @ 1024 by default. Bit few.
limit nofile 32768 32768

script
  set -e
  mkfifo /tmp/myservice-log-fifo
  ( logger -t myservice &amp;lt;/tmp/myservice-log-fifo &amp;amp; )
  exec &amp;gt;/tmp/myservice-log-fifo
  rm /tmp/myservice-log-fifo
  exec sudo -u www-data MASTERKEY=`echo hi` /home/ubuntu/myservice/server.sh 2&amp;gt;&amp;amp;1
end script

post-start script
   echo &#39;My Service Just started&#39;
end script
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That’s it! Now, you can start your service now by calling: &lt;code&gt;start myservice&lt;/code&gt;, stop
it with &lt;code&gt;stop myservice&lt;/code&gt;, and it will run automatically on system startup!&lt;/p&gt;
</description>
                <pubDate>Thu, 21 Aug 2014 00:00:00 -0700</pubDate>
                <link>http://gerardomoad.com/2014/08/21/safely-daemonizing-a-nodejs-server-in-ubuntu.html</link>
                <guid isPermaLink="true">http://gerardomoad.com/2014/08/21/safely-daemonizing-a-nodejs-server-in-ubuntu.html</guid>
            </item>
        
            <item>
                <title>Reconfiguring An Installed Package In Debian And Ubuntu</title>
                <description>&lt;h1 id=&quot;reconfiguring-an-installed-package-in-ubuntu-debian-and-other-ubuntu-based-distributions&quot;&gt;Reconfiguring an installed package in Ubuntu, Debian, and other Ubuntu based distributions.&lt;/h1&gt;

&lt;p&gt;It’s happened to me several times that I &lt;code&gt;apt-get install&lt;/code&gt; some packages which
prompt me to enter some settings in a &lt;code&gt;curses&lt;/code&gt; interface, but I don’t know which
values to enter at the time, or later on realize that I need different settings
than what I had originally entered.&lt;/p&gt;

&lt;p&gt;To see the screen that you saw again, just do:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;sudo dpkg-reconfigure PKG_NAME&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;… where &lt;code&gt;PKG_NAME&lt;/code&gt; is the name of the package whose configuration screens
you wish to see again.&lt;/p&gt;
</description>
                <pubDate>Wed, 23 Jul 2014 00:00:00 -0700</pubDate>
                <link>http://gerardomoad.com/2014/07/23/reconfiguring-an-installed-package-in-debian-and-ubuntu.html</link>
                <guid isPermaLink="true">http://gerardomoad.com/2014/07/23/reconfiguring-an-installed-package-in-debian-and-ubuntu.html</guid>
            </item>
        
            <item>
                <title>Receiving And Relaying Email For My Domains To Free Webmail Accounts</title>
                <description>&lt;h1 id=&quot;receiving-and-relaying-email-for-my-domains-over-to-free-webmail-accounts&quot;&gt;Receiving and relaying email for my domains over to free webmail accounts.&lt;/h1&gt;

&lt;h2 id=&quot;goal&quot;&gt;Goal&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Be able to receive email addressed to email addresses in domains that I own
on commercial, free webmail accounts (or any other kind of email system,
really).&lt;/li&gt;
  &lt;li&gt;Not pay any extra money for this (beyond what I’m paying for domain
registration, DNS hosting, and my server).&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;prerequisites&quot;&gt;Prerequisites&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Have some domains that you’re in control of, e.g.: the domain resolves
to a host that you control, you have access to the DNS hosting account and
are able to add/remove/modify DNS records (especially MX records).&lt;/li&gt;
  &lt;li&gt;Have control over a host on the internet where you’ll be pointing some
records of your domains to. For this guide, I’m using Debian-based Ubuntu Linux
Server distribution version 14.04 LTS.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;steps&quot;&gt;Steps&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;create a new MX record with the following information (how you enter this
into your DNS provider’s interface should be easy to figure out):&lt;/p&gt;

    &lt;pre&gt;&lt;code&gt;host name: yourdomain.com
type: MX
ttl: default
priority: 10 (Normal)
data: yourdomain.com
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code&gt;sudo apt-get install postfix&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Choose “Internet site” option on menu prompt and enter settings that make
sense. We’ll do the rest of the configuration manually.&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Put this at the end of your &lt;code&gt;/etc/postfix/main.cf&lt;/code&gt; file:&lt;/p&gt;

    &lt;pre&gt;&lt;code&gt;## added by me
virtual_alias_domains = yourfirstdomain.com, yourseconddomain.com
virtual_alias_maps = hash:/etc/postfix/virtual
inet_protocols = all
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Create file &lt;code&gt;/etc/postfix/virtual&lt;/code&gt; and add lines to it like the following:&lt;/p&gt;

    &lt;pre&gt;&lt;code&gt;name@yourfirstdomain.com        name@freewebmailprovider.com
name@yourseconddomain.com       name@freewebmailprovider.com ... this will cause any mail for `name@yourfirstdomain.com` and  `name@yourseconddomain.com` to be forwarded to `name@freewebmailprovider.com`
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
  &lt;li&gt;Make sure you generate the “hash” or “.db” file for &lt;code&gt;virtual&lt;/code&gt; by doing:
&lt;code&gt;sudo postmap hash:/etc/postfix/virtual&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Reload &lt;code&gt;postfix&lt;/code&gt; config with &lt;code&gt;sudo /etc/init.d/postfix reload&lt;/code&gt;, or
start &lt;code&gt;postfix&lt;/code&gt; in case it is not running already: &lt;code&gt;sudo /etc/init.d/postfix start&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Make sure that port 25 (SMTP) is open on your server’s ACL/firewall!&lt;/li&gt;
  &lt;li&gt;Done!&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;troubleshooting&quot;&gt;Troubleshooting&lt;/h2&gt;

&lt;p&gt;Pretty much anything that might have gone wrong with your &lt;code&gt;postfix&lt;/code&gt; configuration
will be logged to either one of these upon the package’s &lt;code&gt;start&lt;/code&gt; or &lt;code&gt;reload&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/var/log/mail.err
/var/log/mail.log
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;This comes in very handy for leveraging your ability to support multiple email
addresses on the domains that you control while letting you not worry about
setting up an actual client, and using existing free webmail accounts for
receiving your email.&lt;/p&gt;

&lt;p&gt;This approach covers the &lt;em&gt;receiving&lt;/em&gt; part very well, but I’ve made no effort
to support sending via your server/hosting, and it’s unlikely to work out of
the box without additional configuration. My suggestion is to not try to use
your server for sending email, and to use your webmail or similar client
with a “Reply-To” header if you want. I don’t really care too much since I
just want the receiving part to work, and later on I can reply to emails that
matter to me using my real email address.&lt;/p&gt;
</description>
                <pubDate>Wed, 23 Jul 2014 00:00:00 -0700</pubDate>
                <link>http://gerardomoad.com/2014/07/23/receiving-and-relaying-email-for-my-domains-to-free-webmail-accounts.html</link>
                <guid isPermaLink="true">http://gerardomoad.com/2014/07/23/receiving-and-relaying-email-for-my-domains-to-free-webmail-accounts.html</guid>
            </item>
        
            <item>
                <title>Vim settings missing in OSX</title>
                <description>&lt;p&gt;I got my new laptop (a 13’’ rMBP). Once I started using it, I started noticing
there are a few default settings that an &lt;em&gt;Ubuntu&lt;/em&gt; install of &lt;code&gt;vim&lt;/code&gt; has that 
were missing in &lt;em&gt;OSX&lt;/em&gt; (Mavericks). Here are the few that I’ve added to my
&lt;code&gt;~/.vimrc&lt;/code&gt; so far that I’ve found useful:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;set ruler
filetype plugin indent on
syntax on
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;… and some additional settings to have tabs and shifts be automatically
converted to 4 spaces:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;set expandtab
set shiftwidth=4
set tabstop=4
set softtabstop=4
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;… and finally, I enable modelines, since I like to use them on my source
files and to support them when opening others’ files:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;set modeline
set modelines=5
&lt;/code&gt;&lt;/pre&gt;

</description>
                <pubDate>Wed, 21 May 2014 00:00:00 -0700</pubDate>
                <link>http://gerardomoad.com/2014/05/21/vim-settings-missing-in-osx.html</link>
                <guid isPermaLink="true">http://gerardomoad.com/2014/05/21/vim-settings-missing-in-osx.html</guid>
            </item>
        
            <item>
                <title>Ruby/Jekyll/Github Pages/OSX madness!</title>
                <description>&lt;p&gt;Trying to get my Jekyll blog setup locally on my new Mac, I’ve been following
these steps, and encountering the following issues:&lt;/p&gt;

&lt;p&gt;I remembered that I would need to use &lt;code&gt;bundle&lt;/code&gt; to launch my Jekyll instance
in order for it to work the same way as it does on the hosted Github Pages, so I
ran:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;&lt;span class=&quot;lineno&quot;&gt;1&lt;/span&gt;     sudo gem install bundle
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;output:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Fetching: bundler-1.6.2.gem (100%)
Successfully installed bundler-1.6.2
Fetching: bundle-0.0.1.gem (100%)
Successfully installed bundle-0.0.1
Parsing documentation for bundler-1.6.2
Installing ri documentation for bundler-1.6.2
Parsing documentation for bundle-0.0.1
Installing ri documentation for bundle-0.0.1
2 gems installed
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;as Borat would say: “nice! I like!”. I like, indeed!&lt;/p&gt;

&lt;p&gt;I also remembered that for everything that the hosted Github Pages does
to work locally, I had to install the &lt;code&gt;git-pages&lt;/code&gt; &lt;em&gt;gem&lt;/em&gt;. I tried doing so:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;&lt;span class=&quot;lineno&quot;&gt;1&lt;/span&gt;     sudo gem install github-pages
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;output:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Fetching: liquid-2.5.5.gem (100%)
Successfully installed liquid-2.5.5
Fetching: fast-stemmer-1.0.2.gem (100%)
Building native extensions.  This could take a while...
ERROR:  Error installing github-pages:
        ERROR: Failed to build gem native extension.

    /System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/bin/ruby extconf.rb
creating Makefile

make &quot;DESTDIR=&quot;
compiling porter.c
porter.c:359:27: warning: &#39;&amp;amp;&amp;amp;&#39; within &#39;||&#39; [-Wlogical-op-parentheses]
      if (a &amp;gt; 1 || a == 1 &amp;amp;&amp;amp; !cvc(z, z-&amp;gt;k - 1)) z-&amp;gt;k--;
                ~~ ~~~~~~~^~~~~~~~~~~~~~~~~~~~
porter.c:359:27: note: place parentheses around the &#39;&amp;amp;&amp;amp;&#39; expression to silence this warning
      if (a &amp;gt; 1 || a == 1 &amp;amp;&amp;amp; !cvc(z, z-&amp;gt;k - 1)) z-&amp;gt;k--;
                          ^
                   (                          )
1 warning generated.
compiling porter_wrap.c
linking shared-object stemmer.bundle
clang: error: unknown argument: &#39;-multiply_definedsuppress&#39; [-Wunused-command-line-argument-hard-error-in-future]
clang: note: this will be a hard error (cannot be downgraded to a warning) in the future
make: *** [stemmer.bundle] Error 1


Gem files will remain installed in /Library/Ruby/Gems/2.0.0/gems/fast-stemmer-1.0.2 for inspection.
Results logged to /Library/Ruby/Gems/2.0.0/gems/fast-stemmer-1.0.2/ext/gem_make.out
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;… oopsie, there were at least some native packages that could not be built
on my system. After some investigation, I finally got it working and contributed my solution to &lt;strong&gt;Stack Overflow&lt;/strong&gt;
on &lt;a href=&quot;http://stackoverflow.com/a/23795873/1369119&quot;&gt;here&lt;/a&gt;. Damn, it feels good to be a gangster!&lt;/p&gt;

&lt;p&gt;Now, I’m able to run &lt;code&gt;bundle exec jekyll serve&lt;/code&gt; on my Mac locally, and it fires
up an instance of my &lt;strong&gt;Github Pages&lt;/strong&gt;/&lt;strong&gt;Jekyll&lt;/strong&gt; blog on port 4000.&lt;/p&gt;
</description>
                <pubDate>Wed, 21 May 2014 00:00:00 -0700</pubDate>
                <link>http://gerardomoad.com/2014/05/21/ruby-jekyll-github-pages-osx-madness.html</link>
                <guid isPermaLink="true">http://gerardomoad.com/2014/05/21/ruby-jekyll-github-pages-osx-madness.html</guid>
            </item>
        
            <item>
                <title>More tweaks to my Jekyll blog</title>
                <description>&lt;p&gt;I’ve made my Jekyll blog a little better (closer to having proper blog features)
by doing the following:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;I fixed the pagination by using the code found at the bottom of the &lt;a href=&quot;http://jekyllrb.com/docs/pagination/&quot;&gt;Jekyll
guide page on pagination&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;I added RSS support by adapting one of &lt;a href=&quot;https://github.com/snaptortoise/jekyll-rss-feeds&quot;&gt;the templates I found here&lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;No. 1 on my &lt;strong&gt;TODO&lt;/strong&gt; list is a good commenting model that’s compatible with Jekyll’s
static site generation.&lt;/p&gt;

</description>
                <pubDate>Wed, 21 May 2014 00:00:00 -0700</pubDate>
                <link>http://gerardomoad.com/2014/05/21/more-tweaks-to-my-jekyll-blog.html</link>
                <guid isPermaLink="true">http://gerardomoad.com/2014/05/21/more-tweaks-to-my-jekyll-blog.html</guid>
            </item>
        
            <item>
                <title>Blogging with Github Pages and Jekyll</title>
                <description>&lt;p&gt;I created a repository named &lt;a href=&quot;https://github.com/sanx/sanx.github.io&quot;&gt;&lt;code&gt;sanx.github.io&lt;/code&gt;&lt;/a&gt; (&lt;em&gt;sanx&lt;/em&gt; is my Github username. this blog’s raw data is on that repo!), then I followed the steps to auto publish a page using a layout that I liked from the ones they have available, then I ventured into trying to get it all to work using the Jekyll blogging pattern, basically porting the templates and the includes so that my site is generated using Jekyll while using the templates that I want.&lt;/p&gt;

&lt;p&gt;When I was initially trying to get my Markdown posts to be generated by Jekyll on Github Pages, I started getting build error emails, and basically my site wasn’t being updated at all, which prompted me to follow the steps for installing Jekyll locally to make debugging easier. Oh, the surprise when I ran &lt;code&gt;jekyll&lt;/code&gt; or even &lt;code&gt;jekyll serve&lt;/code&gt; and I got nice outputs, something like the following for &lt;code&gt;jekyll serve&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;Output:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Configuration file: none
            Source: /home/germoad/gerardomoad.com
       Destination: /home/germoad/gerardomoad.com/_site
      Generating... 
                    done.
Configuration file: none
    Server address: http://0.0.0.0:4000/
  Server running... press ctrl-c to stop.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;… which was confusing, because the build was failing on Github Pages, and I was supposedly using the same Jekyll thingie that it does, locally. Upon reading a little more, I followed the following link from the link in my build errors email: &lt;a href=&quot;https://help.github.com/articles/using-jekyll-with-pages#troubleshooting&quot;&gt;https://help.github.com/articles/using-jekyll-with-pages#troubleshooting&lt;/a&gt; , and in there they mention that the most accurate way of running Jekyll in a way that closely resembles how it’s run by Github Pages is by doing &lt;code&gt;bundle exec jekyll serve&lt;/code&gt;. When I ran that command, it gave me a nice debug error pointing to the exact spot on my Markdown document that had a syntax error.&lt;/p&gt;
</description>
                <pubDate>Wed, 14 May 2014 00:00:00 -0700</pubDate>
                <link>http://gerardomoad.com/2014/05/14/blogging-with-github-pages-and-jekyll.html</link>
                <guid isPermaLink="true">http://gerardomoad.com/2014/05/14/blogging-with-github-pages-and-jekyll.html</guid>
            </item>
        
            <item>
                <title>Setting up `tmux`</title>
                <description>&lt;p&gt;Now that I’ve &lt;em&gt;kind of&lt;/em&gt; lost (I hope that I haven’t, but I’ve been lazy to unbury it from my backups, plus I like being kind of forced to re-do my setup from scratch) my old *nix setup, including my .bashrc and my tmux setup, I need to re-do my tmux setup file.&lt;/p&gt;

&lt;p&gt;I like tmux to act gnu screen-ish (mainly having &lt;code&gt;Ctrl-A&lt;/code&gt; as the start of command sequences, and having both &lt;code&gt;Ctrl-A Ctrl-A&lt;/code&gt; and &lt;code&gt;Ctrl-A A&lt;/code&gt; act as &lt;em&gt;jump to last seen panel&lt;/em&gt; sequence. I think that’s all I need from gnu screen that’s initially missing in tmux.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Update&lt;/em&gt;: A few days after I initially wrote this post, I realized that about the only settings that I need to change in order to feel comfortable using &lt;code&gt;tmux&lt;/code&gt; are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;the default escape sequence (&lt;code&gt;Ctrl-B&lt;/code&gt; by default) to &lt;code&gt;Ctrl-A&lt;/code&gt; (a la &lt;em&gt;GNU&lt;/em&gt; &lt;code&gt;screen&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;use &lt;code&gt;vi&lt;/code&gt; keys for navigating the screen (while in copy or command modes)&lt;/li&gt;
  &lt;li&gt;(bonus) have a nice visual distinction between the currently active window, the last active window, and the rest of the windows on the bottom status bar&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This was accomplished easily by putting the following &lt;code&gt;.tmux.conf&lt;/code&gt; in my home directory:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# change the default escape sequence form Ctrl-B to Ctrl-A:
set-option -g prefix C-a
unbind-key C-b
bind-key C-a send-prefix

# use &quot;vi&quot; style screen navigation (as opposed to Emacs, which is what tmux uses by default):
setw -g mode-keys vi
set -g status-keys vi

# make currently active and last active parts of the status bar different from the rest of the windows:
set-option -gw window-status-current-bg &quot;green&quot;
set-option -gw window-status-current-attr &quot;italics&quot;

set-option -gw window-status-last-bg &quot;green&quot;
set-option -gw window-status-last-attr &quot;bold&quot;
&lt;/code&gt;&lt;/pre&gt;
</description>
                <pubDate>Tue, 13 May 2014 00:00:00 -0700</pubDate>
                <link>http://gerardomoad.com/2014/05/13/setting-up-tmux.html</link>
                <guid isPermaLink="true">http://gerardomoad.com/2014/05/13/setting-up-tmux.html</guid>
            </item>
        
            <item>
                <title>On Macbook Pros</title>
                <description>&lt;p&gt;Lately, I’ve been observing people on the commuter train, and one particular type of person that I see are people sporting their corporate issued Macbook Pro laptops. Some of them are typing away at their code editors, others are filling in weekly reports, etc.&lt;/p&gt;

&lt;p&gt;It’s interesting how about the only people with Macbook Pros that I see look like they’re using the corporate laptop. I don’t see a lot of people who seem to be using their personal privately bought Macbook Pros (although, admittedly, I think I’ve seen a few people with Macbook Airs and other type of older white Macbooks). A few people who I know had Macbook Pros that they had bought by themselves took care of it as if the laptops were more valuable (or needed more care than, at least) a newborn baby. You know the drill: super padded bag case, another zipped case where the laptop is directly put inside, and a cloth covering the keyboard that is perfectly cut to the size of the screen that (I think) it’s meant to protect.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Update (May/13)&lt;/em&gt;: Yesterday I ordered a maxed out specs 13’’ MBPr. After dedicating almost an entire week to look for the “right” laptop, I finally settled on that one.&lt;/p&gt;

&lt;p&gt;In the past 1.5 weeks I’ve been using just my 2009 Intel Core 2 Solo (single core) Acer Aspire AS 1410, which, after adding 2 additional GB of RAM ($32 at Fry’s, my favorite store) for a total of 4 GB, &lt;em&gt;and&lt;/em&gt; upgrading to the latest Ubuntu 64 bit release, (14.04 LTS ftw!!… it had a 1 year old 32 bit release installed which was dead slow) has turned out to be amazingly fast and responsive considering the hardware limitations. I’m just amazed at how much upping the RAM and using a 64 bit OS and applications helped unlock this baby’s potential.&lt;/p&gt;

&lt;p&gt;One of the reasons why I didn’t want a MBP is that I felt that I was likely to be using Ubuntu as my primary OS anyway, given how good it has worked for me on this outdated hardware: I wasn’t willing to pay the Apple premiun since I wasn’t planning on using their OSX as my primary OS anyway. Long story short, I found the MBPr 13’’ to be:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Just &lt;em&gt;slightly&lt;/em&gt; above my ~3 lb of weight limit.&lt;/li&gt;
  &lt;li&gt;Twice as much RAM as competing PC Ultrabooks that I could get fast (some custom configurations have it but would take an additional 2 to 3 weeks to ship). Considering that neither MBPr nor PC Ultrabooks are user upgradeable.&lt;/li&gt;
  &lt;li&gt;Twice as much SSD HDD storage capacity compared to PC Ultrabooks that I could get fast (same as the RAM).&lt;/li&gt;
  &lt;li&gt;1 GHZ faster clock speed on average compared to the Ultrabooks that I was considering (2.8 GHz vs ~1.8 GHz on the Ultrabooks).&lt;/li&gt;
  &lt;li&gt;Better Intel integrated video (Intel Iris 5000 series video vs Intel 4400 series video on most Ultrabooks, except for the Asus Zenbook which is only $300 chea… less expensive, but comes with half the SSD capacity, half the RAM).&lt;/li&gt;
  &lt;li&gt;Better by almost 4 hours extra battery life on light usage (with not much video streaming): ~9 hrs vs ~5 hrs for most Ultrabooks.&lt;/li&gt;
  &lt;li&gt;Easily run OSX, which I was planning to do either using VMs or remote desktop connecting to the Hackintosh desktop that I’m planning to host at home.&lt;/li&gt;
  &lt;li&gt;Around $800 more expensive than Ultrabooks I was considering.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;One way I think of it is this: I’m really getting 2 fully featured machines. I’ll likely use OSX with an Ubuntu guest with 8GB of RAM during my day to day, switching back to the OSX host (with a full 8GB available to itself) whenever I would need to use commercial applications like Photoshop, some games, Apple’s Video and Audio editing apps, etc.&lt;/p&gt;
</description>
                <pubDate>Tue, 13 May 2014 00:00:00 -0700</pubDate>
                <link>http://gerardomoad.com/2014/05/13/on-macbook-pros.html</link>
                <guid isPermaLink="true">http://gerardomoad.com/2014/05/13/on-macbook-pros.html</guid>
            </item>
        
            <item>
                <title>PHP Composer</title>
                <description>&lt;p&gt;PHP Composer dependency manager. I just found out about it. All I have to say is: “Wow!”.&lt;/p&gt;

&lt;p&gt;I regularly go back to the &lt;a href=&quot;http://www.doctrine-project.org/&quot;&gt;Doctrine Project’s website&lt;/a&gt; to review their fabulous ORM’s documentation and to find out if there are any new versions.&lt;/p&gt;

&lt;p&gt;Around a week or two ago I went back to Doctrine’s website and something caught my eye: they were no longer recommending downloading the tarballs/zip files, installing with PEAR, or checking out code directly from their source control repo. They were recommending people use what seemed to me like a new, non-standard way to install modules on PHP. I didn’t see the need to upgrade then, so I didn’t bother downloading the new versions either via the traditional methods that I was more familiar with or via this crazy new way.&lt;/p&gt;

&lt;p&gt;It was only 2 days ago, while I was doing the usual Friday afternoon web surfing (and after I had just realized the existence of something called PHAR archive packages for PHP, kind of like Java JARs but for PHP) that I went back to Doctrine’s site and I decided to follow the link to the &lt;a href=&quot;https://packagist.org/packages/doctrine/orm&quot;&gt;Composer distribution of the Doctrine ORM&lt;/a&gt;. I was welcomed by a neat little page that looks everything like what &lt;a href=&quot;http://pear.php.net&quot;&gt;PHP.net’s PEAR site&lt;/a&gt; should look like.&lt;/p&gt;

&lt;p&gt;Upon some browsing around the pages for the package that I was interested in, as well as others, I fell in love with &lt;a href=&quot;http://www.packagist.org&quot;&gt;Packagist&lt;/a&gt;, the packaged modules repository that &lt;a href=&quot;http://getcomposer.org/&quot;&gt;Composer&lt;/a&gt; uses by default.&lt;/p&gt;

&lt;p&gt;So, basically, what these guys have done is to bring Web 2.0 (shouldn’t that term be way past its expiration date now that we’ve been using it for over 6 years?) toolset cleanness and openness to the PHP world, something that will hopefully help relive a lot of abandoned projects (license permitting, Composer’s compatibility with Git, Mercurial and other DVCMS makes it easy for developers to continue working where somebody else left off, maybe a while ago!).&lt;/p&gt;

&lt;p&gt;I expect to make a few more posts on this topic in the near future as I experiment with these new tools.&lt;/p&gt;
</description>
                <pubDate>Sun, 03 Feb 2013 00:00:00 -0800</pubDate>
                <link>http://gerardomoad.com/2013/02/03/php-composer.html</link>
                <guid isPermaLink="true">http://gerardomoad.com/2013/02/03/php-composer.html</guid>
            </item>
        
    </channel>
</rss>
